generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Content {
  id       Int      @id @default(autoincrement())
  title    String?
  content  String? @db.Text
  images   String[]
  filename String?  @unique
  recordId Int
  authorId String?  @db.Uuid
  User     User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  Record   Record   @relation(fields: [recordId], references: [id], onDelete: Cascade)

  @@unique([recordId, filename])
  @@index([authorId])
  @@index([recordId])
}

model Member {
  id        String   @id @default(uuid())
  nickname  String
  createdAt DateTime @default(now())
  major     String?
  profile   String?
  name      String?
  role      String?
  year      String
  src       String?
}

model Record {
  id               Int               @id @default(autoincrement())
  year             Int?
  place            String?
  date             String?
  activityType     String?
  details          String?
  Content          Content[]
  PostHikeContents PostHikeContent[] @relation("RecordToPostHikeContent")

  @@index([year])
  @@index([activityType])
}

model RecordContent {
  year      Int?
  content   String?
  images    String[]
  createdAt DateTime @default(now())
  filename  String?
  id        Int      @id @default(autoincrement())
}

model User {
  email     String    @unique
  name      String
  id        String    @id @db.Uuid @default(uuid())
  createdAt DateTime  @default(now())
  grade     Int?
  updatedAt DateTime  @default(now()) @updatedAt
  Content   Content[]
  UserRoles UserRole[]
  PostHikeContents PostHikeContent[]

  @@index([grade])
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  UserRoles       UserRole[]
}
// model UserRole {
//   isAdmin     Boolean @default(false)
//   isCL        Boolean @default(false)
//   isSL        Boolean @default(false)
//   isMeal      Boolean @default(false)
//   isEquipment Boolean @default(false)
//   isWeather   Boolean @default(false)
//   id          Int     @id @default(autoincrement())
//   userId      String  @unique @db.Uuid
//   User        User    @relation("UserToRole", fields: [userId], references: [id], onDelete: Cascade)
// }
model UserRole {
  id       Int @id @default(autoincrement())
  userId   String @db.Uuid
  roleId   Int
  User     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  Role     Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
}


model PostHikeContent {
  id               Int      @id @default(autoincrement())
  sl               String? @db.Text
  equipmentComment String? @db.Text
  weatherComment   String? @db.Text
  mealComment      String? @db.Text
  slComment        String? @db.Text
  clId             String? @db.Uuid
  recordId         Int
  equipmentPerson  String?
  weatherPerson    String?
  mealPerson       String?
  impression       String[]
  Record           Record   @relation("RecordToPostHikeContent", fields: [recordId], references: [id], onDelete: Cascade)
  User             User?     @relation(fields: [clId], references: [id], onDelete: SetNull)


  @@index([recordId])
}

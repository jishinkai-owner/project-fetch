generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ActivityRecord {
  title        String?
  year         Int?
  date         String?
  filename     String?
  place        String?
  id           Int     @id @default(autoincrement())
  activityType String?
  details      String?
}

model Content {
  id       Int      @id @default(autoincrement())
  title    String?
  content  String?
  images   String[]
  filename String?  @unique
  recordId Int
  authorId String?  @db.Uuid
  Record   Record   @relation(fields: [recordId], references: [id])
  User     User?    @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([recordId, filename])
}

model Member {
  id        String   @id @default(uuid())
  nickname  String
  createdAt DateTime @default(now())
  major     String?
  profile   String?
  name      String?
  role      String?
  year      String
  src       String?
}

model Record {
  id               Int               @id @default(autoincrement())
  year             Int?
  place            String?
  date             String?
  activityType     String?
  details          String?
  Content          Content[]
  PostHikeContents PostHikeContent[] @relation("RecordToPostHikeContent")

  // @@unique([year, place, activityType])
}

model RecordContent {
  year      Int?
  content   String?
  images    String[]
  createdAt DateTime @default(now())
  filename  String?
  id        Int      @id @default(autoincrement())
}

model User {
  id        String    @id @db.Uuid
  name      String
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  grade     Int?
  Role      Role?     @relation("UserToRole")
  Content   Content[] //Contents that the User authored
}

model Role {
  id          Int     @id @default(autoincrement())
  userId      String  @db.Uuid
  isAdmin     Boolean
  isCL        Boolean
  isSL        Boolean
  isMeal      Boolean
  isEquipment Boolean
  isWeather   Boolean
  User        User    @relation(fields: [userId], references: [id], name: "UserToRole", onUpdate: Cascade, onDelete: Cascade)

  @@unique([userId])
}

model PostHikeContent {
  id               Int      @id @default(autoincrement())
  equipmentPerson  String?
  weatherPerson    String?
  mealPerson       String?
  sl               String?
  equipmentComment String?
  weatherComment   String?
  mealComment      String?
  slComemnt        String?
  impression       String[]
  recordId         Int
  clId             String
  clName           String?
  Record           Record   @relation(fields: [recordId], references: [id], name: "RecordToPostHikeContent", onDelete: Cascade)
}
